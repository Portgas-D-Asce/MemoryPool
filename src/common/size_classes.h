#ifndef MEMORYPOOL_FEW_SIZE_CLASSES_H
#define MEMORYPOOL_FEW_SIZE_CLASSES_H
#include <utility>

// Precomputed size class parameters.
struct SizeClassInfo {
    // Max size storable in that class
    uint32_t size;

    // Number of pages to allocate at a time
    uint8_t pages;

    // Number of objects to move between a per-thread list and a central list in
    // one shot.  We want this to be not too small so we can amortize the lock
    // overhead for accessing the central list.  Making it too big may temporarily
    // cause unnecessary memory wastage in the per-thread free list until the
    // scavenger cleans up the list.
    uint8_t num_to_move;

    // Max per-CPU slab capacity for the default 256KB slab size.
    // Scaled up/down for larger/smaller slab sizes.
    uint32_t max_capacity;
};

static constexpr SizeClassInfo size_classes[] = {
//                                         |    waste     |
//  bytes pages batch   cap    class  objs |fixed sampling|    inc
    {     0,    0,    0,    0},  //  0     0  0.00%    0.00%   0.00%
    {     8,    1,   32, 2369},  //  0  1024  0.58%    0.42%   0.00%
    {    16,    1,   32, 2369},  //  1   512  0.58%    0.42% 100.00%
    {    32,    1,   32, 2369},  //  2   256  0.58%    0.42% 100.00%
    {    64,    1,   32, 2369},  //  3   128  0.58%    0.42% 100.00%
    {    80,    1,   32, 2369},  //  4   102  0.97%    0.42%  25.00%
    {    96,    1,   32, 1596},  //  5    85  0.97%    0.42%  20.00%
    {   112,    1,   32,  911},  //  6    73  0.78%    0.42%  16.67%
    {   128,    1,   32, 1035},  //  7    64  0.58%    0.42%  14.29%
    {   144,    1,   32,  699},  //  8    56  2.14%    0.42%  12.50%
    {   160,    1,   32,  586},  //  9    51  0.97%    0.42%  11.11%
    {   176,    1,   32,  333},  // 10    46  1.75%    0.42%  10.00%
    {   192,    1,   32,  418},  // 11    42  2.14%    0.42%   9.09%
    {   208,    1,   32,  296},  // 12    39  1.55%    0.42%   8.33%
    {   224,    1,   32,  264},  // 13    36  2.14%    0.42%   7.69%
    {   240,    1,   32,  251},  // 14    34  0.97%    0.42%   7.14%
    {   256,    1,   32,  507},  // 15    32  0.58%    0.42%   6.67%
    {   272,    1,   32,  231},  // 16    30  0.97%    0.42%   6.25%
    {   288,    1,   32,  264},  // 17    28  2.14%    0.42%   5.88%
    {   304,    1,   32,  205},  // 18    26  4.08%    0.42%   5.56%
    {   320,    1,   32,  250},  // 19    25  2.91%    0.42%   5.26%
    {   336,    1,   32,  269},  // 20    24  2.14%    0.42%   5.00%
    {   352,    1,   32,  193},  // 21    23  1.75%    0.42%   4.76%
    {   368,    1,   32,  173},  // 22    22  1.75%    0.42%   4.55%
    {   384,    1,   32,  209},  // 23    21  2.14%    0.42%   4.35%
    {   400,    1,   32,  190},  // 24    20  2.91%    0.42%   4.17%
    {   416,    1,   32,  187},  // 25    19  4.08%    0.43%   4.00%
    {   448,    1,   32,  236},  // 26    18  2.14%    0.42%   7.69%
    {   480,    1,   32,  198},  // 27    17  0.97%    0.42%   7.14%
    {   512,    1,   32,  356},  // 28    16  0.58%    0.42%   6.67%
    {   576,    1,   32,  241},  // 29    14  2.14%    0.42%  12.50%
    {   640,    1,   32,  213},  // 30    12  6.80%    0.43%  11.11%
    {   704,    1,   32,  193},  // 31    11  6.02%    0.43%  10.00%
    {   768,    1,   32,  191},  // 32    10  6.80%    0.43%   9.09%
    {   896,    1,   32,  205},  // 33     9  2.14%    0.43%  16.67%
    {  1024,    1,   32,  332},  // 34     8  0.58%    0.42%  14.29%
    {  1152,    2,   32,  197},  // 35    14  1.85%    0.43%  12.50%
    {  1280,    2,   32,  180},  // 36    12  6.52%    0.43%  11.11%
    {  1408,    2,   32,  172},  // 37    11  5.74%    0.43%  10.00%
    {  1536,    2,   32,  178},  // 38    10  6.52%    0.43%   9.09%
    {  1792,    2,   32,  175},  // 39     9  1.85%    0.43%  16.67%
    {  2048,    2,   32,  204},  // 40     8  0.29%    0.42%  14.29%
    {  2304,    2,   28,  171},  // 41     7  1.85%    0.43%  12.50%
    {  2688,    2,   24,  165},  // 42     6  1.85%    0.43%  16.67%
    {  2816,    3,   23,  154},  // 43     8  8.51%    0.44%   4.76%
    {  3200,    2,   20,  160},  // 44     5  2.63%    0.43%  13.64%
    {  3456,    3,   18,  153},  // 45     7  1.75%    0.43%   8.00%
    {  3584,    4,   18,  152},  // 46     9  1.71%    0.43%   3.70%
    {  4096,    1,   16,  312},  // 47     2  0.58%    0.43%  14.29%
    {  4736,    3,   13,  158},  // 48     5  3.83%    0.43%  15.62%
    {  5376,    2,   12,  153},  // 49     3  1.85%    0.43%  13.51%
    {  6144,    3,   10,  158},  // 50     4  0.19%    0.42%  14.29%
    {  6528,    4,   10,  150},  // 51     5  0.54%    0.43%   6.25%
    {  7168,    7,    9,  152},  // 52     8  0.08%    0.42%   9.80%
    {  8192,    1,    8,  207},  // 53     1  0.58%    0.03%  14.29%
    {  9472,    5,    6,  154},  // 54     4  7.61%    0.85%  15.62%
    { 10240,    4,    6,  150},  // 55     3  6.39%    0.85%   8.11%
    { 12288,    3,    5,  154},  // 56     2  0.19%    0.82%  20.00%
    { 13568,    5,    4,  150},  // 57     3  0.74%    0.82%  10.42%
    { 14336,    7,    4,  149},  // 58     4  0.08%    0.82%   5.66%
    { 16384,    2,    4,  160},  // 59     1  0.29%    0.03%  14.29%
    { 20480,    5,    3,  153},  // 60     2  0.12%    1.21%  25.00%
    { 24576,    3,    2,  152},  // 61     1  0.19%    0.03%  20.00%
    { 28672,    7,    2,  152},  // 62     2  0.08%    1.60%  16.67%
    { 32768,    4,    2,  161},  // 63     1  0.15%    0.03%  14.29%
    { 40960,    5,    2,  150},  // 64     1  0.12%    0.03%  25.00%
    { 49152,    6,    2,  149},  // 65     1  0.10%    0.03%  20.00%
    { 57344,    7,    2,  149},  // 66     1  0.08%    0.03%  16.67%
    { 65536,    8,    2,  153},  // 67     1  0.07%    0.03%  14.29%
    { 73728,    9,    2,  150},  // 68     1  0.07%    0.03%  12.50%
    { 81920,   10,    2,  149},  // 69     1  0.06%    0.03%  11.11%
    { 90112,   11,    2,  148},  // 70     1  0.05%    0.03%  10.00%
    { 98304,   12,    2,  149},  // 71     1  0.05%    0.03%   9.09%
    {106496,   13,    2,  148},  // 72     1  0.05%    0.03%   8.33%
    {114688,   14,    2,  148},  // 73     1  0.04%    0.03%   7.69%
    {131072,   16,    2,  149},  // 74     1  0.04%    0.03%  14.29%
    {139264,   17,    2,  149},  // 75     1  0.03%    0.03%   6.25%
    {147456,   18,    2,  148},  // 76     1  0.03%    0.03%   5.88%
    {155648,   19,    2,  148},  // 77     1  0.03%    0.03%   5.56%
    {172032,   21,    2,  148},  // 78     1  0.03%    0.03%  10.53%
    {188416,   23,    2,  148},  // 79     1  0.03%    0.03%   9.52%
    {204800,   25,    2,  148},  // 80     1  0.02%    0.03%   8.70%
    {221184,   27,    2,  148},  // 81     1  0.02%    0.03%   8.00%
    {237568,   29,    2,  146},  // 82     1  0.02%    0.03%   7.41%
    {262144,   32,    2,  148},  // 83     1  0.02%    0.03%  10.34%
};


#endif //MEMORYPOOL_FEW_SIZE_CLASSES_H
